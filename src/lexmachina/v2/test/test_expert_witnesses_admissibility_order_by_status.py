# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20241105
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.expert_witnesses_admissibility_order_by_status import ExpertWitnessesAdmissibilityOrderByStatus

class TestExpertWitnessesAdmissibilityOrderByStatus(unittest.TestCase):
    """ExpertWitnessesAdmissibilityOrderByStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExpertWitnessesAdmissibilityOrderByStatus:
        """Test ExpertWitnessesAdmissibilityOrderByStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExpertWitnessesAdmissibilityOrderByStatus`
        """
        model = ExpertWitnessesAdmissibilityOrderByStatus()
        if include_optional:
            return ExpertWitnessesAdmissibilityOrderByStatus(
                active = [
                    openapi_client.models.expert_witness_admissibility_order.ExpertWitnessAdmissibilityOrder(
                        expert_witness = openapi_client.models.expert_witness.ExpertWitness(
                            name = '', 
                            expert_witness_id = 56, ), 
                        retaining_party_ids = [
                            56
                            ], 
                        opposing_party_ids = [
                            56
                            ], 
                        judge = null, 
                        docket_entry_filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        outcome = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        negated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        reinstated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                voided = [
                    openapi_client.models.expert_witness_admissibility_order.ExpertWitnessAdmissibilityOrder(
                        expert_witness = openapi_client.models.expert_witness.ExpertWitness(
                            name = '', 
                            expert_witness_id = 56, ), 
                        retaining_party_ids = [
                            56
                            ], 
                        opposing_party_ids = [
                            56
                            ], 
                        judge = null, 
                        docket_entry_filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        outcome = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        negated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        reinstated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                reversed = [
                    openapi_client.models.expert_witness_admissibility_order.ExpertWitnessAdmissibilityOrder(
                        expert_witness = openapi_client.models.expert_witness.ExpertWitness(
                            name = '', 
                            expert_witness_id = 56, ), 
                        retaining_party_ids = [
                            56
                            ], 
                        opposing_party_ids = [
                            56
                            ], 
                        judge = null, 
                        docket_entry_filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        outcome = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        negated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        reinstated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ]
            )
        else:
            return ExpertWitnessesAdmissibilityOrderByStatus(
                active = [
                    openapi_client.models.expert_witness_admissibility_order.ExpertWitnessAdmissibilityOrder(
                        expert_witness = openapi_client.models.expert_witness.ExpertWitness(
                            name = '', 
                            expert_witness_id = 56, ), 
                        retaining_party_ids = [
                            56
                            ], 
                        opposing_party_ids = [
                            56
                            ], 
                        judge = null, 
                        docket_entry_filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        outcome = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        negated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        reinstated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                voided = [
                    openapi_client.models.expert_witness_admissibility_order.ExpertWitnessAdmissibilityOrder(
                        expert_witness = openapi_client.models.expert_witness.ExpertWitness(
                            name = '', 
                            expert_witness_id = 56, ), 
                        retaining_party_ids = [
                            56
                            ], 
                        opposing_party_ids = [
                            56
                            ], 
                        judge = null, 
                        docket_entry_filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        outcome = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        negated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        reinstated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                reversed = [
                    openapi_client.models.expert_witness_admissibility_order.ExpertWitnessAdmissibilityOrder(
                        expert_witness = openapi_client.models.expert_witness.ExpertWitness(
                            name = '', 
                            expert_witness_id = 56, ), 
                        retaining_party_ids = [
                            56
                            ], 
                        opposing_party_ids = [
                            56
                            ], 
                        judge = null, 
                        docket_entry_filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        outcome = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        negated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        reinstated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
        )
        """

    def testExpertWitnessesAdmissibilityOrderByStatus(self):
        """Test ExpertWitnessesAdmissibilityOrderByStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
