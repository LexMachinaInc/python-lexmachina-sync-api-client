# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20241105
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.appeals_case_query import AppealsCaseQuery

class TestAppealsCaseQuery(unittest.TestCase):
    """AppealsCaseQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppealsCaseQuery:
        """Test AppealsCaseQuery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppealsCaseQuery`
        """
        model = AppealsCaseQuery()
        if include_optional:
            return AppealsCaseQuery(
                courts = openapi_client.models.court_filter.CourtFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                case_status = 'Open',
                case_tags = openapi_client.models.case_tags_filter.CaseTagsFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                dates = openapi_client.models.appeals_case_dates_filter.AppealsCaseDatesFilter(
                    filed = openapi_client.models.timing_filter.TimingFilter(
                        on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    terminated = openapi_client.models.timing_filter.TimingFilter(
                        on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    last_docket = , ),
                judges = openapi_client.models.judge_filter.JudgeFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], ),
                law_firms = openapi_client.models.appeals_law_firm_filter.AppealsLawFirmFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], 
                    include_appellant = [
                        56
                        ], 
                    exclude_appellant = [
                        56
                        ], 
                    include_appellee = [
                        56
                        ], 
                    exclude_appellee = [
                        56
                        ], 
                    include_respondent = [
                        56
                        ], 
                    exclude_respondent = [
                        56
                        ], 
                    include_third_party = [
                        56
                        ], 
                    exclude_third_party = [
                        56
                        ], 
                    include_petitioner_movant = [
                        56
                        ], 
                    exclude_petitioner_movant = [
                        56
                        ], ),
                attorneys = openapi_client.models.appeals_attorney_filter.AppealsAttorneyFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], 
                    include_appellant = [
                        56
                        ], 
                    exclude_appellant = [
                        56
                        ], 
                    include_appellee = [
                        56
                        ], 
                    exclude_appellee = [
                        56
                        ], 
                    include_respondent = [
                        56
                        ], 
                    exclude_respondent = [
                        56
                        ], 
                    include_third_party = [
                        56
                        ], 
                    exclude_third_party = [
                        56
                        ], 
                    include_petitioner_movant = [
                        56
                        ], 
                    exclude_petitioner_movant = [
                        56
                        ], ),
                parties = openapi_client.models.appeals_party_filter.AppealsPartyFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], 
                    include_appellant = [
                        56
                        ], 
                    exclude_appellant = [
                        56
                        ], 
                    include_appellee = [
                        56
                        ], 
                    exclude_appellee = [
                        56
                        ], 
                    include_respondent = [
                        56
                        ], 
                    exclude_respondent = [
                        56
                        ], 
                    include_third_party = [
                        56
                        ], 
                    exclude_third_party = [
                        56
                        ], 
                    include_petitioner_movant = [
                        56
                        ], 
                    exclude_petitioner_movant = [
                        56
                        ], ),
                originating_venues = openapi_client.models.originating_venues_filter.OriginatingVenuesFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                originating_cases = openapi_client.models.originating_cases_filter.OriginatingCasesFilter(
                    include_district_case_ids = [
                        56
                        ], 
                    exclude_district_case_ids = [
                        56
                        ], 
                    include_originating_judges = openapi_client.models.originating_judge_filter.OriginatingJudgeFilter(
                        district_federal_judges = openapi_client.models.judge_filter.JudgeFilter(
                            include = [
                                56
                                ], 
                            exclude = [
                                56
                                ], ), ), 
                    originating_district_case_criteria = openapi_client.models.originating_district_case_filter.OriginatingDistrictCaseFilter(
                        courts = openapi_client.models.court_filter.CourtFilter(), 
                        case_types = openapi_client.models.originating_case_types_filter.OriginatingCaseTypesFilter(), ), ),
                resolutions = openapi_client.models.resolutions_filter.ResolutionsFilter(
                    include = [
                        openapi_client.models.individual_resolutions_filter.IndividualResolutionsFilter(
                            summary = '', 
                            specific = '', )
                        ], 
                    exclude = [
                        openapi_client.models.individual_resolutions_filter.IndividualResolutionsFilter(
                            summary = '', 
                            specific = '', )
                        ], ),
                supreme_court_decisions = openapi_client.models.supreme_court_decisions_filter.SupremeCourtDecisionsFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                ordering = 'ByFirstFiled',
                page = 56,
                page_size = 56
            )
        else:
            return AppealsCaseQuery(
        )
        """

    def testAppealsCaseQuery(self):
        """Test AppealsCaseQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
