# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20241105
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.district_case_query import DistrictCaseQuery

class TestDistrictCaseQuery(unittest.TestCase):
    """DistrictCaseQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DistrictCaseQuery:
        """Test DistrictCaseQuery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DistrictCaseQuery`
        """
        model = DistrictCaseQuery()
        if include_optional:
            return DistrictCaseQuery(
                case_status = 'Open',
                case_types = openapi_client.models.case_types_filter.CaseTypesFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                case_tags = openapi_client.models.case_tags_filter.CaseTagsFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                dates = openapi_client.models.case_dates_filter.CaseDatesFilter(
                    filed = openapi_client.models.timing_filter.TimingFilter(
                        on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    terminated = openapi_client.models.timing_filter.TimingFilter(
                        on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    trial = , 
                    last_docket = , ),
                judges = openapi_client.models.judge_filter.JudgeFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], ),
                magistrates = openapi_client.models.magistrate_filter.MagistrateFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], ),
                events = openapi_client.models.event_filter.EventFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                law_firms = openapi_client.models.law_firm_filter.LawFirmFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], 
                    include_plaintiff = [
                        56
                        ], 
                    exclude_plaintiff = [
                        56
                        ], 
                    include_defendant = [
                        56
                        ], 
                    exclude_defendant = [
                        56
                        ], 
                    include_third_party = [
                        56
                        ], 
                    exclude_third_party = [
                        56
                        ], ),
                attorneys = openapi_client.models.attorney_filter.AttorneyFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], 
                    include_plaintiff = [
                        56
                        ], 
                    exclude_plaintiff = [
                        56
                        ], 
                    include_defendant = [
                        56
                        ], 
                    exclude_defendant = [
                        56
                        ], 
                    include_third_party = [
                        56
                        ], 
                    exclude_third_party = [
                        56
                        ], ),
                parties = openapi_client.models.party_filter.PartyFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], 
                    include_plaintiff = [
                        56
                        ], 
                    exclude_plaintiff = [
                        56
                        ], 
                    include_defendant = [
                        56
                        ], 
                    exclude_defendant = [
                        56
                        ], 
                    include_third_party = [
                        56
                        ], 
                    exclude_third_party = [
                        56
                        ], ),
                courts = openapi_client.models.court_filter.CourtFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                resolutions = openapi_client.models.resolutions_filter.ResolutionsFilter(
                    include = [
                        openapi_client.models.individual_resolutions_filter.IndividualResolutionsFilter(
                            summary = '', 
                            specific = '', )
                        ], 
                    exclude = [
                        openapi_client.models.individual_resolutions_filter.IndividualResolutionsFilter(
                            summary = '', 
                            specific = '', )
                        ], ),
                findings = [
                    openapi_client.models.individual_findings_filter.IndividualFindingsFilter(
                        judgment_source = openapi_client.models.judgment_source_filter.JudgmentSourceFilter(
                            include = [
                                ''
                                ], 
                            exclude = [
                                ''
                                ], ), 
                        name_type = openapi_client.models.name_type_filter.NameTypeFilter(), 
                        date = openapi_client.models.timing_filter.TimingFilter(
                            on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        awarded_to_parties = [
                            56
                            ], 
                        awarded_against_parties = [
                            56
                            ], 
                        patent_invalidity_reasons = openapi_client.models.patent_invalidity_reasons_filter.PatentInvalidityReasonsFilter(), )
                    ],
                remedies = [
                    openapi_client.models.individual_remedies_filter.IndividualRemediesFilter(
                        judgment_source = openapi_client.models.judgment_source_filter.JudgmentSourceFilter(
                            include = [
                                ''
                                ], 
                            exclude = [
                                ''
                                ], ), 
                        name_type = openapi_client.models.name_type_filter.NameTypeFilter(), 
                        date = openapi_client.models.timing_filter.TimingFilter(
                            on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        awarded_to_parties = [
                            56
                            ], 
                        awarded_against_parties = [
                            56
                            ], )
                    ],
                damages = [
                    openapi_client.models.individual_damages_filter.IndividualDamagesFilter(
                        judgment_source = openapi_client.models.judgment_source_filter.JudgmentSourceFilter(
                            include = [
                                ''
                                ], 
                            exclude = [
                                ''
                                ], ), 
                        name_type = openapi_client.models.name_type_filter.NameTypeFilter(), 
                        date = openapi_client.models.timing_filter.TimingFilter(
                            on_or_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            on_or_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        awarded_to_parties = [
                            56
                            ], 
                        awarded_against_parties = [
                            56
                            ], 
                        minimum_amount = null, )
                    ],
                patents = openapi_client.models.patent_filter.PatentFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                mdl = openapi_client.models.multidistrict_litigation_filter.MultidistrictLitigationFilter(
                    include = [
                        56
                        ], 
                    exclude = [
                        56
                        ], ),
                appellate_decisions = openapi_client.models.appellate_decision_filter.AppellateDecisionFilter(
                    include = [
                        ''
                        ], 
                    exclude = [
                        ''
                        ], ),
                ordering = 'ByFirstFiled',
                page = 56,
                page_size = 56
            )
        else:
            return DistrictCaseQuery(
        )
        """

    def testDistrictCaseQuery(self):
        """Test DistrictCaseQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
