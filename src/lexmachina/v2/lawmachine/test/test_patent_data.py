# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20241105
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lawmachine.models.patent_data import PatentData

class TestPatentData(unittest.TestCase):
    """PatentData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatentData:
        """Test PatentData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatentData`
        """
        model = PatentData()
        if include_optional:
            return PatentData(
                number = '',
                title = '',
                abstract = '',
                inventors = lawmachine.models.inventors.Inventors(
                    inventors = [
                        ''
                        ], 
                    original_assignee = [
                        null
                        ], 
                    filing_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    issue_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                district_court_cases = lawmachine.models.patent_case_information.PatentCaseInformation(
                    number_of_cases = 56, 
                    findings = [
                        lawmachine.models.patent_findings.PatentFindings(
                            case_id = [
                                56
                                ], 
                            type = [
                                ''
                                ], 
                            winner = '', )
                        ], )
            )
        else:
            return PatentData(
                number = '',
                inventors = lawmachine.models.inventors.Inventors(
                    inventors = [
                        ''
                        ], 
                    original_assignee = [
                        null
                        ], 
                    filing_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    issue_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                district_court_cases = lawmachine.models.patent_case_information.PatentCaseInformation(
                    number_of_cases = 56, 
                    findings = [
                        lawmachine.models.patent_findings.PatentFindings(
                            case_id = [
                                56
                                ], 
                            type = [
                                ''
                                ], 
                            winner = '', )
                        ], ),
        )
        """

    def testPatentData(self):
        """Test PatentData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
