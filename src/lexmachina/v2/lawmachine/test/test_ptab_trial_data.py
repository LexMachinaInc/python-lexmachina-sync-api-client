# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20241105
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lawmachine.models.ptab_trial_data import PTABTrialData

class TestPTABTrialData(unittest.TestCase):
    """PTABTrialData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PTABTrialData:
        """Test PTABTrialData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PTABTrialData`
        """
        model = PTABTrialData()
        if include_optional:
            return PTABTrialData(
                ptab_trial_id = 56,
                ptab_trial_number = '',
                status = 'Open',
                dates = lawmachine.models.ptab_trial_dates.PTABTrialDates(
                    filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    terminated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    institution_decision = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    final_decision = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                uspto_patent_technology_center = lawmachine.models.uspto_patent_technology_center.USPTOPatentTechnologyCenter(
                    number = 56, 
                    name = '', ),
                administrative_patent_judges = [
                    lawmachine.models.administrative_patent_judge.AdministrativePatentJudge(
                        name = '', 
                        administrative_patent_judge_id = 56, 
                        details = [
                            lawmachine.models.administrative_patent_judge_detail.AdministrativePatentJudgeDetail(
                                stage = '', 
                                role = '', )
                            ], )
                    ],
                law_firms = [
                    lawmachine.models.law_firm.LawFirm(
                        name = '', 
                        law_firm_id = 56, 
                        client_party_ids = [
                            56
                            ], )
                    ],
                attorneys = [
                    lawmachine.models.attorney.Attorney(
                        name = '', 
                        attorney_id = 56, 
                        law_firm_ids = [
                            56
                            ], 
                        clients_party_ids = [
                            56
                            ], )
                    ],
                parties = [
                    lawmachine.models.party.Party(
                        name = '', 
                        party_id = 56, 
                        role = '', )
                    ],
                trial_type = '',
                trial_tags = [
                    ''
                    ],
                trial_resolution = '',
                patent = lawmachine.models.ptab_patent.PTABPatent(
                    number = '', 
                    title = '', 
                    application_number = '', ),
                claim_findings = [
                    lawmachine.models.ptab_claim_findings.PTABClaimFindings(
                        numbers = [
                            56
                            ], 
                        petition = '', 
                        institution_decision = '', 
                        final_written_decision = '', )
                    ],
                petition_stage_grounds = lawmachine.models.ptab_petition_stage_ground.PTABPetitionStageGround(
                    statutes = [
                        ''
                        ], 
                    prior_art = [
                        lawmachine.models.prior_art.PriorArt(
                            prior_art_type = '', 
                            prior_art_references = [
                                ''
                                ], )
                        ], ),
                institution_decision_grounds = [
                    lawmachine.models.ptab_decision_ground.PTABDecisionGround(
                        decision = '', 
                        statute = '', 
                        claims = [
                            56
                            ], 
                        prior_art = [
                            lawmachine.models.prior_art.PriorArt(
                                prior_art_type = '', 
                                prior_art_references = [
                                    ''
                                    ], )
                            ], )
                    ],
                final_decision_grounds = [
                    lawmachine.models.ptab_decision_ground.PTABDecisionGround(
                        decision = '', 
                        statute = '', 
                        claims = [
                            56
                            ], 
                        prior_art = [
                            lawmachine.models.prior_art.PriorArt(
                                prior_art_type = '', 
                                prior_art_references = [
                                    ''
                                    ], )
                            ], )
                    ]
            )
        else:
            return PTABTrialData(
                ptab_trial_id = 56,
                ptab_trial_number = '',
                status = 'Open',
                dates = lawmachine.models.ptab_trial_dates.PTABTrialDates(
                    filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    terminated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    institution_decision = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    final_decision = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                uspto_patent_technology_center = lawmachine.models.uspto_patent_technology_center.USPTOPatentTechnologyCenter(
                    number = 56, 
                    name = '', ),
                administrative_patent_judges = [
                    lawmachine.models.administrative_patent_judge.AdministrativePatentJudge(
                        name = '', 
                        administrative_patent_judge_id = 56, 
                        details = [
                            lawmachine.models.administrative_patent_judge_detail.AdministrativePatentJudgeDetail(
                                stage = '', 
                                role = '', )
                            ], )
                    ],
                law_firms = [
                    lawmachine.models.law_firm.LawFirm(
                        name = '', 
                        law_firm_id = 56, 
                        client_party_ids = [
                            56
                            ], )
                    ],
                attorneys = [
                    lawmachine.models.attorney.Attorney(
                        name = '', 
                        attorney_id = 56, 
                        law_firm_ids = [
                            56
                            ], 
                        clients_party_ids = [
                            56
                            ], )
                    ],
                parties = [
                    lawmachine.models.party.Party(
                        name = '', 
                        party_id = 56, 
                        role = '', )
                    ],
                trial_type = '',
                trial_tags = [
                    ''
                    ],
                trial_resolution = '',
                patent = lawmachine.models.ptab_patent.PTABPatent(
                    number = '', 
                    title = '', 
                    application_number = '', ),
                claim_findings = [
                    lawmachine.models.ptab_claim_findings.PTABClaimFindings(
                        numbers = [
                            56
                            ], 
                        petition = '', 
                        institution_decision = '', 
                        final_written_decision = '', )
                    ],
                petition_stage_grounds = lawmachine.models.ptab_petition_stage_ground.PTABPetitionStageGround(
                    statutes = [
                        ''
                        ], 
                    prior_art = [
                        lawmachine.models.prior_art.PriorArt(
                            prior_art_type = '', 
                            prior_art_references = [
                                ''
                                ], )
                        ], ),
                institution_decision_grounds = [
                    lawmachine.models.ptab_decision_ground.PTABDecisionGround(
                        decision = '', 
                        statute = '', 
                        claims = [
                            56
                            ], 
                        prior_art = [
                            lawmachine.models.prior_art.PriorArt(
                                prior_art_type = '', 
                                prior_art_references = [
                                    ''
                                    ], )
                            ], )
                    ],
                final_decision_grounds = [
                    lawmachine.models.ptab_decision_ground.PTABDecisionGround(
                        decision = '', 
                        statute = '', 
                        claims = [
                            56
                            ], 
                        prior_art = [
                            lawmachine.models.prior_art.PriorArt(
                                prior_art_type = '', 
                                prior_art_references = [
                                    ''
                                    ], )
                            ], )
                    ],
        )
        """

    def testPTABTrialData(self):
        """Test PTABTrialData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
