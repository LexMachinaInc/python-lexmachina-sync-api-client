# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20241105
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lawmachine.models.state_case_data import StateCaseData

class TestStateCaseData(unittest.TestCase):
    """StateCaseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StateCaseData:
        """Test StateCaseData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StateCaseData`
        """
        model = StateCaseData()
        if include_optional:
            return StateCaseData(
                state_case_id = 56,
                title = '',
                state = '',
                court = '',
                case_no = '',
                status = 'Open',
                case_type = [
                    ''
                    ],
                case_tags = [
                    ''
                    ],
                dates = lawmachine.models.state_case_dates.StateCaseDates(
                    filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    terminated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    trial = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                resolution = lawmachine.models.case_resolution.CaseResolution(
                    summary = '', 
                    specific = '', ),
                events = [
                    lawmachine.models.case_event.CaseEvent(
                        type = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                judges = [
                    lawmachine.models.state_judge.StateJudge(
                        name = '', 
                        state_judge_id = 56, )
                    ],
                rulings = lawmachine.models.state_case_rulings_by_status.StateCaseRulingsByStatus(
                    active = [
                        lawmachine.models.rulings.Rulings(
                            judgment_event = '', 
                            awarded_to_party_ids = [
                                56
                                ], 
                            awarded_against_party_ids = [
                                56
                                ], 
                            awarded = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                        ], ),
                law_firms = [
                    lawmachine.models.law_firm.LawFirm(
                        name = '', 
                        law_firm_id = 56, 
                        client_party_ids = [
                            56
                            ], )
                    ],
                attorneys = [
                    lawmachine.models.attorney.Attorney(
                        name = '', 
                        attorney_id = 56, 
                        law_firm_ids = [
                            56
                            ], 
                        clients_party_ids = [
                            56
                            ], )
                    ],
                parties = [
                    lawmachine.models.party.Party(
                        name = '', 
                        party_id = 56, 
                        role = '', )
                    ],
                damages = lawmachine.models.state_case_damages_by_status.StateCaseDamagesByStatus(
                    active = [
                        lawmachine.models.state_case_damages.StateCaseDamages(
                            name = '', 
                            awarded_to_party_id = [
                                56
                                ], 
                            awarded_against_party_ids = [
                                56
                                ], 
                            amount = '', 
                            awarded = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                        ], )
            )
        else:
            return StateCaseData(
                state_case_id = 56,
                title = '',
                state = '',
                court = '',
                case_no = '',
                status = 'Open',
                case_type = [
                    ''
                    ],
                case_tags = [
                    ''
                    ],
                dates = lawmachine.models.state_case_dates.StateCaseDates(
                    filed = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    terminated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    trial = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                events = [
                    lawmachine.models.case_event.CaseEvent(
                        type = '', 
                        occurred = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                judges = [
                    lawmachine.models.state_judge.StateJudge(
                        name = '', 
                        state_judge_id = 56, )
                    ],
                rulings = lawmachine.models.state_case_rulings_by_status.StateCaseRulingsByStatus(
                    active = [
                        lawmachine.models.rulings.Rulings(
                            judgment_event = '', 
                            awarded_to_party_ids = [
                                56
                                ], 
                            awarded_against_party_ids = [
                                56
                                ], 
                            awarded = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                        ], ),
                law_firms = [
                    lawmachine.models.law_firm.LawFirm(
                        name = '', 
                        law_firm_id = 56, 
                        client_party_ids = [
                            56
                            ], )
                    ],
                attorneys = [
                    lawmachine.models.attorney.Attorney(
                        name = '', 
                        attorney_id = 56, 
                        law_firm_ids = [
                            56
                            ], 
                        clients_party_ids = [
                            56
                            ], )
                    ],
                parties = [
                    lawmachine.models.party.Party(
                        name = '', 
                        party_id = 56, 
                        role = '', )
                    ],
                damages = lawmachine.models.state_case_damages_by_status.StateCaseDamagesByStatus(
                    active = [
                        lawmachine.models.state_case_damages.StateCaseDamages(
                            name = '', 
                            awarded_to_party_id = [
                                56
                                ], 
                            awarded_against_party_ids = [
                                56
                                ], 
                            amount = '', 
                            awarded = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                        ], ),
        )
        """

    def testStateCaseData(self):
        """Test StateCaseData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
